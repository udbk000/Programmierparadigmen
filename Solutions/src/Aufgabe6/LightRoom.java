package Aufgabe6;

/**
 * This class implements UsableRoom as a room without any windows. LightRooms are usable rooms which should get enough artificial light
 * in order to have them actually usable. The purpose of a LightRoom is the same as a WindowRoom's: either a bureau or a storage.
 * Look into interface UsableRoom or Room for further information.
 */
public class LightRoom implements UsableRoom {
    /**
     * Variable length is used to store the length of the room in m. Can only be positive or zero.
     * Not changeable.
     */
    private final float length;

    /**
     * Variable width is used to store the width of the room in m. Can only be positive or zero.
     * Not changeable.
     */
    private final float width;

    /**
     * This variable stores the luminous flux in Lumen (lm) of this room. This variable is always positive.
     */
    private int lumFlux;

    /**
     * This String stores the LightRoom's unique name. The name is generated in the constructor and is not changeable.
     */
    private final String roomName;

    /**
     * This int stores the nameID of this LightRoom. NameID's identify a room correctly, yet they remain
     * easy to memorize or understand. The room's name is generated by concatenation of this ID to the name of the room type, i.e. "LightRoom".
     * This variable can only grow. If a room is removed from the office, its ID is never used again.
     */
    private static int roomID = 0;

    /**
     * This integer is the internal definition of the room's purpose. As only two possible purposes exist, 1 is used to
     * imply that the room is being used as a bureau, 2 is used to indicate the usage as storage. As the default value
     * is 0, this value signalizes that the room has not yet been dedicated to a specific purpose.
     * Purpose, once it has been modified, can only accept the values 1 or 2. If the value has not been set, the default value
     * is 0 signifying no purpose.
     */
    private int purpose;


    public LightRoom(float l, float w){
        length = l;
        width = w;
        lumFlux = Math.min(500, (int) (Math.random() * 1000)); // random lumFlux, Berechnung vernachlässigbar für Aufgabenstellung, 500 maximale ideale Beleuchtung eines Raumes
        roomName = getUniqueLightRoomName();
    }

    private synchronized String getUniqueLightRoomName(){
        String ret = "LightRoom-" + (++roomID);
        return ret;
    }

    @Override
    public float area() {
        return width*length;
    }

    @Override
    public float getLength() {
        return length;
    }

    @Override
    public float getWidth() {
        return width;
    }

    @Override
    public String getName() {
        return roomName;
    }

    @Override
    public float getWindowArea() {
        return 0;
    }

    @Override
    public int getLumen() {
        return lumFlux;
    }

    @Override
    public void changePurpose() {
        if(purpose == 0){
            purpose = 1; //set purpose to "bureau"
            System.out.println("The purpose of light room " + getName() + " has been initially set to bureau.");
        } else if(purpose == 1){
            purpose = 2;
            System.out.println("The purpose of light room " + getName() + " has been set to storage.");
        } else if(purpose == 2){
            System.out.println("The purpose of light room " + getName() + " has been set to bureau.");
            purpose = 1;
        }

    }

    @Override
    public int getWorkplace() {
        if (purpose == 1) {
            return (int) (length * width * Math.random()) + 1; //Simulationslogik, zu vernachlässigen
        } else return 0;
    }

    @Override
    public float getStorage() {
        if(purpose == 2){
            return width*length*2.5f; // height of every room is set to 2.5m as per definition in "Room"
        }
        else return 0;
    }
}
