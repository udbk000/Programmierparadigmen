package Aufgabe6;

/**
 * This class implements UsableRoom as a room without any windows. LightRooms are usable rooms which should get enough artificial light
 * in order to have them actually usable. The purpose of a LightRoom is the same as a WindowRoom's: either a bureau or a storage.
 * Look into interface UsableRoom or Room for further information.
 */
public class LightRoom implements UsableRoom {
    /**
     * Variable length is used to store the length of the room in m. Can only be positive or zero.
     * Not changeable.
     */
    private final float length;

    /**
     * Variable width is used to store the width of the room in m. Can only be positive or zero.
     * Not changeable.
     */
    private final float width;

    /**
     * This variable stores the luminous flux in Lumen (lm) of this room. This variable is always positive.
     * Not changeable.
     */
    private final int lumFlux;

    /**
     * This String stores the LightRoom's unique name. The name is generated in the constructor and is not changeable.
     */
    private final String roomName;

    /**
     * This int stores the nameID of this LightRoom. NameID's identify a room correctly, yet they remain
     * easy to memorize or understand. The room's name is generated by concatenation of this ID to the name of the room type, i.e. "LightRoom".
     * This variable can only grow. If a room is removed from the office, its ID is never used again.
     */
    private static int roomID = 0;

    /**
     * This integer is the internal definition of the room's purpose. As only two possible purposes exist, 1 is used to
     * imply that the room is being used as a bureau, 2 is used to indicate the usage as storage. As the default value
     * is 0, this value signalizes that the room has not yet been dedicated to a specific purpose.
     * Purpose, once it has been modified, can only accept the values 1 or 2. If the value has not been set, the default value
     * is 0 signifying no purpose.
     */
    private int purpose;

    /**
     * The constructor initializes an instance of LightRoom. The length and width of the room must be set by the client.
     * The name of the room is generated internally. The luminous flux of this room is randomly generated internally.
     * @param l the length of this room in m, >=0
     * @param w the width of this room in m, >= 0
     */
    public LightRoom(float l, float w){
        length = l;
        width = w;
        lumFlux = Math.min(500, (int) (Math.random() * 1000)); // random lumFlux, Berechnung vernachlässigbar für Aufgabenstellung, 500 maximale ideale Beleuchtung eines Raumes
        roomName = getUniqueLightRoomName();
    }

    /**
     * Helper method to generate unique name of this room. Can only be called once.
     * @return unique room name for this LightRoom.
     */
    private synchronized String getUniqueLightRoomName(){
        String ret = "LightRoom-" + (++roomID);
        return ret;
    }

    /**
     * This method returns the surface area of this LightRoom in m^2.
     * @return the surface area of this LightRoom in m^2, >= 0
     */
    @Override
    public float area() {
        return width*length;
    }

    /**
     * @return the length of this room in m, >= 0
     */
    @Override
    public float getLength() {
        return length;
    }

    /**
     * @return the width of this room in m, >= 0
     */
    @Override
    public float getWidth() {
        return width;
    }

    /**
     * This method returns the unique and identifying name of this LightRoom.
     * @return a unique and identifying name of this LightRoom
     */
    @Override
    public String getName() {
        return roomName;
    }

    /**
     * As LightRooms do not have windows, this method always returns 0. The surface area of all windows in this windowless room has to be 0 m^2.
     * @return 0
     */
    @Override
    public float getWindowArea() {
        return 0;
    }

    /**
     * This method returns the luminous flux of this LightRoom in Lumen (lm). The returned value is always positive.
     * @return luminous flux of this room in Lumen, >0
     */
    @Override
    public int getLumen() {
        return lumFlux;
    }

    /**
     * Given a UsableRoom, this method will change the room's designated purpose. Usable rooms can either be used as a bureau or as storage rooms.
     * Therefore, this method acts as a switch between these two purposes. The first call of this method sets the purpose to bureau.
     */
    @Override
    public void changePurpose() {
        if(purpose == 0){
            purpose = 1; //set purpose to "bureau"
            System.out.println("The purpose of light room " + getName() + " has been initially set to bureau.");
        } else if(purpose == 1){
            purpose = 2;
            System.out.println("The purpose of light room " + getName() + " has been set to storage.");
        } else if(purpose == 2){
            System.out.println("The purpose of light room " + getName() + " has been set to bureau.");
            purpose = 1;
        }

    }

    /**
     * Given a usable room with its purpose being a bureau, this method will return an int which represents the amount of
     * different workplaces inside this room. A call of this method in a usable room that does not serve as a bureau will always return 0.
     * @return an integer >=0 counting the amount of distinct workplaces
     */
    @Override
    public int getWorkplace() {
        if (purpose == 1) {
            return (int) (length * width * Math.random()) + 1; //Simulationslogik, zu vernachlässigen
        } else return 0;
    }

    /**
     * Given a usable room with its purpose being a storage room, this method will return the volume of this room in m^3.
     * A call of this method in a usable room that does not serve as a storage unit will always return 0.
     * @return a floating point number >=0 representing the max volume available for storage purposes in this room
     */
    @Override
    public float getStorage() {
        if(purpose == 2){
            return width*length*2.5f; // height of every room is set to 2.5m as per definition in "Room"
        }
        else return 0;
    }
}
